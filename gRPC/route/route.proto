syntax = "proto3";

option  go_package = "github.com/crossainthegiant/Go-practice/gRPC/route";

package route;


/*
  proto用来描述一个服务，如Goal.md中所说。主要定义两种数据，一种是message（信息类型），另一种是Service(支持的服务）。
  描述一个向导服务，服务名为RouteGuide
定义四种不同的信息类型，分别为Point,Rectangle,Feature,RouteSummary以及Chat。
定义四个方法：
- GetFeature(输入为一个Point,返回这个点的Feature)
- ListFeatures(输入为一个Rectangle,输出流这个区域内所有的Feature)
- RecordRoute(输入流为每个时间点的位置Point,返回一个RouteSummary)
- Recommend(输入流RecommendationRequest,返回一个输出流Feature)
 */

message Point {
  int32 latitude = 1;//经度,1是它的field tag，数字作为key而不是值
  int32 longitude = 2;//纬度
}

message Rectangle{
  Point lo=1;
  Point hi=2;
}

message Feature {
  string name = 1;
  Point location = 2;
}

message RouteSummary {
  int32 point_count = 1;
  int32 distance = 2;
  int32  elapsed_time = 3;
}
enum RecommendationMode {
  GetFarest = 0;
  GetNearest = 1;
}

message RecommendationRequest {
    RecommendationMode mode = 1;
    Point point = 2;
}

service RouteGuide {
  //unary,即时通讯
  rpc GetFeature(Point) returns (Feature) {}
  //server side streaming,客户端发一个unary请求，服务器发回来的是一个流
  rpc ListFeatures(Rectangle) returns (stream Feature){}
  // client side streaming,与上面相反
  rpc RecordRoute(stream Point) returns (RouteSummary){}
  //bidirectional streaming，都是流
  rpc Recommend(stream RecommendationRequest) returns (stream Feature){}
}


